diff --git mlibc-clean/meson.build mlibc-workdir/meson.build
index 12a74ae..a73374a 100644
--- mlibc-clean/meson.build
+++ mlibc-workdir/meson.build
@@ -154,6 +154,10 @@ elif host_machine.system() == 'dripos'
 	rtdl_include_dirs += include_directories('sysdeps/dripos/include')
 	libc_include_dirs += include_directories('sysdeps/dripos/include')
 	subdir('sysdeps/dripos')
+elif host_machine.system() == 'nyx'
+	rtdl_include_dirs += include_directories('sysdeps/nyx/include')
+	libc_include_dirs += include_directories('sysdeps/nyx/include')
+	subdir('sysdeps/nyx')
 else
 	error('No sysdeps defined for OS: ' + host_machine.system())
 endif
diff --git mlibc-workdir/sysdeps/nyx/generic/entry.cpp mlibc-workdir/sysdeps/nyx/generic/entry.cpp
new file mode 100644
index 0000000..79e300c
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/generic/entry.cpp
@@ -0,0 +1,42 @@
+#include <bits/ensure.h>
+#include <bits/posix/posix_signal.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/debug.hpp>
+#include <mlibc/elf/startup.h>
+#include <nyx/syscall.h>
+#include <stdint.h>
+#include <stdlib.h>
+
+// defined by the POSIX library
+void __mlibc_initLocale();
+
+extern "C" uintptr_t *__dlapi_entrystack();
+
+extern char **environ;
+static mlibc::exec_stack_data __mlibc_stack_data;
+
+struct LibraryGuard {
+  LibraryGuard();
+};
+
+static LibraryGuard guard;
+
+LibraryGuard::LibraryGuard() {
+  __mlibc_initLocale();
+
+  // Parse the exec() stack.
+  mlibc::parse_exec_stack(__dlapi_entrystack(), &__mlibc_stack_data);
+  mlibc::set_startup_data(__mlibc_stack_data.argc, __mlibc_stack_data.argv,
+                          __mlibc_stack_data.envp);
+}
+
+extern "C" void __mlibc_entry(int (*main_fn)(int argc, char *argv[],
+                                             char *env[])) {
+  // mlibc::sys_sigentry((void *)__mlibc_sigentry);
+
+  // TODO: call __dlapi_enter, otherwise static builds will break (see Linux
+  // sysdeps)
+  auto result =
+      main_fn(__mlibc_stack_data.argc, __mlibc_stack_data.argv, environ);
+  exit(result);
+}
diff --git mlibc-workdir/sysdeps/nyx/generic/generic.cpp mlibc-workdir/sysdeps/nyx/generic/generic.cpp
new file mode 100644
index 0000000..a04585f
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/generic/generic.cpp
@@ -0,0 +1,191 @@
+#include <abi-bits/fcntl.h>
+#include <asm/ioctls.h>
+#include <bits/ensure.h>
+#include <dirent.h>
+#include <errno.h>
+#include <fcntl.h>
+#include <frg/hash.hpp>
+#include <frg/hash_map.hpp>
+#include <limits.h>
+#include <mlibc/all-sysdeps.hpp>
+#include <mlibc/allocator.hpp>
+#include <mlibc/debug.hpp>
+#include <nyx/syscall.h>
+#include <stdint.h>
+#include <stdlib.h>
+#include <string.h>
+
+#define STRINGIFY_(X) #X
+#define STRINGIFY(X) STRINGIFY_(X)
+#define STUB_ONLY                                                              \
+  {                                                                            \
+    sys_libc_log("function at line " STRINGIFY(__LINE__) " is a stub");        \
+    sys_libc_panic();                                                          \
+  }
+
+namespace mlibc {
+
+void sys_libc_log(const char *message) {
+  __syscall1(SYS_DEBUG, (uintptr_t)message);
+}
+
+void sys_exit(int status) {
+  __syscall1(SYS_EXIT, status);
+  __builtin_unreachable();
+}
+
+void sys_libc_panic() {
+  sys_libc_log("\nMLIBC PANIC\n");
+  sys_exit(1);
+  __builtin_unreachable();
+}
+
+int sys_open(const char *path, int flags, mode_t mode, int *fd) {
+  (void)flags;
+  *fd = __syscall2(SYS_OPEN, (uintptr_t)path, mode);
+  if (*fd < 0)
+    return *fd;
+
+  return 0;
+}
+
+int sys_seek(int fd, off_t offset, int whence, off_t *new_offset) {
+  *new_offset = __syscall3(SYS_SEEK, fd, offset, whence);
+  return 0;
+}
+
+int sys_gethostname(char *buffer, size_t bufsize) {
+  memcpy(buffer, "nyx", 3);
+  return 0;
+}
+
+int sys_getpid() { return __syscall0(SYS_GETPID); }
+int sys_getppid() { return __syscall0(SYS_GETPPID); }
+
+int sys_fork(int *pid) {
+  *pid = __syscall0(SYS_FORK);
+  return 0;
+}
+
+pid_t sys_getpgid(pid_t pid, pid_t *pgid) {
+  (void)pid;
+  mlibc::infoLogger() << "getpgid() is a stub" << frg::endlog;
+  *pgid = 0;
+  return 0;
+}
+
+int sys_execve(const char *path, char *const argv[], char *const envp[]) {
+  return __syscall3(SYS_EXEC, (uintptr_t)path, (uintptr_t)argv,
+                    (uintptr_t)envp);
+}
+
+int sys_ioctl(int fd, unsigned long request, void *arg, int *result) {
+  (void)fd;
+  (void)request;
+  (void)arg;
+  (void)result;
+  *result = 0;
+  mlibc::infoLogger() << "ioctl() is a stub" << frg::endlog;
+  return 0;
+}
+
+int sys_getpuid() { return 0; }
+
+int sys_close(int fd) { return __syscall1(SYS_CLOSE, fd); }
+
+int sys_vm_unmap(void *pointer, size_t size) STUB_ONLY;
+
+int sys_geteuid(void) { return 0; }
+int sys_getegid(void) { return 0; }
+int sys_getuid(void) { return 0; }
+int sys_getgid(void) { return 0; }
+int sys_setpgid(pid_t pid, pid_t pgid) {
+  (void)pid;
+  (void)pgid;
+  mlibc::infoLogger() << "setpgid() is a stub" << frg::endlog;
+  return 0;
+}
+
+int sys_stat(fsfd_target fsfdt, int fd, const char *path, int flags,
+             struct stat *statbuf) {
+  if (fsfdt == fsfd_target::path)
+    fd = AT_FDCWD;
+  else if (fsfdt == fsfd_target::fd)
+    flags |= AT_EMPTY_PATH;
+  else
+    __ensure(fsfdt == fsfd_target::fd_path);
+
+  return __syscall4(SYS_STAT, fd, (uintptr_t)path, flags, (uintptr_t)statbuf);
+}
+
+int sys_sigaction(int signum, const struct sigaction *act,
+                  struct sigaction *oldact) {
+  (void)signum;
+  (void)act;
+  (void)oldact;
+  mlibc::infoLogger() << "sigaction() is a stub" << frg::endlog;
+  return 0;
+}
+
+int sys_sigprocmask(int how, const sigset_t *__restrict set,
+                    sigset_t *__restrict retrieve) {
+  (void)how;
+  (void)set;
+  (void)retrieve;
+  mlibc::infoLogger() << "sigprocmask() is a stub!" << frg::endlog;
+  return ENOSYS;
+}
+
+int sys_isatty(int fd) {
+  if (fd < 3)
+    return 0;
+  return ENOTTY;
+}
+
+int sys_vm_map(void *hint, size_t size, int prot, int flags, int fd,
+               off_t offset, void **window) {
+  struct {
+    void *hint;
+    size_t size;
+    int prot;
+    int flags;
+    int fd;
+    off_t offset;
+    void **window;
+  } req = {hint, size, prot, flags, fd, offset, window};
+
+  return __syscall1(SYS_MMAP, (uintptr_t)&req);
+}
+
+int sys_anon_allocate(size_t size, void **pointer) {
+  return sys_vm_map(NULL, size, PROT_READ | PROT_WRITE, MAP_ANONYMOUS, -1, 0,
+                    pointer);
+}
+
+int sys_anon_free(void *pointer, size_t size) STUB_ONLY;
+
+int sys_read(int fd, void *buf, size_t count, ssize_t *bytes_read) {
+  *bytes_read = __syscall3(SYS_READ, fd, (uintptr_t)buf, count);
+  return 0;
+}
+
+int sys_write(int fd, void const *buf, size_t count, ssize_t *bytes_written) {
+  *bytes_written = __syscall3(SYS_WRITE, fd, (uintptr_t)buf, count);
+  return 0;
+}
+
+int sys_tcb_set(void *pointer) {
+  return __syscall1(SYS_TCB_SET, (uintptr_t)pointer);
+};
+
+int sys_futex_wait(int *pointer, int expected, timespec const *time) STUB_ONLY;
+int sys_futex_wake(int *pointer) STUB_ONLY;
+int sys_clock_get(int clock, time_t *secs, long *nanos) {
+  (void)clock;
+  (void)secs;
+  (void)nanos;
+  mlibc::infoLogger() << "clock_get() is a stub" << frg::endlog;
+  return 0;
+}
+
+} // namespace mlibc
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/access.h mlibc-workdir/sysdeps/nyx/include/abi-bits/access.h
new file mode 120000
index 0000000..cb83931
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/access.h
@@ -0,0 +1 @@
+../../../../abis/linux/access.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/auxv.h mlibc-workdir/sysdeps/nyx/include/abi-bits/auxv.h
new file mode 120000
index 0000000..c43f878
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/auxv.h
@@ -0,0 +1 @@
+../../../../abis/linux/auxv.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/blkcnt_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/blkcnt_t.h
new file mode 120000
index 0000000..0b0ec27
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/blkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/blkcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/blksize_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/blksize_t.h
new file mode 120000
index 0000000..7dc8d7c
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/blksize_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/blksize_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/clockid_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/clockid_t.h
new file mode 120000
index 0000000..6a42da5
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/clockid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/clockid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/dev_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/dev_t.h
new file mode 120000
index 0000000..bca881e
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/dev_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/dev_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/epoll.h mlibc-workdir/sysdeps/nyx/include/abi-bits/epoll.h
new file mode 120000
index 0000000..eb4b76d
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/epoll.h
@@ -0,0 +1 @@
+../../../../abis/linux/epoll.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/errno.h mlibc-workdir/sysdeps/nyx/include/abi-bits/errno.h
new file mode 120000
index 0000000..6e507de
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/errno.h
@@ -0,0 +1 @@
+../../../../abis/linux/errno.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/fcntl.h mlibc-workdir/sysdeps/nyx/include/abi-bits/fcntl.h
new file mode 120000
index 0000000..463e2c9
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/fcntl.h
@@ -0,0 +1 @@
+../../../../abis/linux/fcntl.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/fsblkcnt_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/fsblkcnt_t.h
new file mode 120000
index 0000000..898dfb2
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/fsblkcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsblkcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/fsfilcnt_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/fsfilcnt_t.h
new file mode 120000
index 0000000..791755c
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/fsfilcnt_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/fsfilcnt_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/gid_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/gid_t.h
new file mode 120000
index 0000000..abce6d6
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/gid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/gid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/in.h mlibc-workdir/sysdeps/nyx/include/abi-bits/in.h
new file mode 120000
index 0000000..418d1d5
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/in.h
@@ -0,0 +1 @@
+../../../../abis/linux/in.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/ino_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/ino_t.h
new file mode 120000
index 0000000..4c20aca
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/ino_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/ino_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/inotify.h mlibc-workdir/sysdeps/nyx/include/abi-bits/inotify.h
new file mode 120000
index 0000000..b5cb282
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/inotify.h
@@ -0,0 +1 @@
+../../../../abis/linux/inotify.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/ioctls.h mlibc-workdir/sysdeps/nyx/include/abi-bits/ioctls.h
new file mode 120000
index 0000000..595106b
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/ioctls.h
@@ -0,0 +1 @@
+../../../../abis/linux/ioctls.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/limits.h mlibc-workdir/sysdeps/nyx/include/abi-bits/limits.h
new file mode 120000
index 0000000..6c88db2
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/limits.h
@@ -0,0 +1 @@
+../../../../abis/linux/limits.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/mode_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/mode_t.h
new file mode 120000
index 0000000..5d78fdf
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/mode_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/mode_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/mqueue.h mlibc-workdir/sysdeps/nyx/include/abi-bits/mqueue.h
new file mode 120000
index 0000000..fa87b07
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/mqueue.h
@@ -0,0 +1 @@
+../../../../abis/linux/mqueue.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/nlink_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/nlink_t.h
new file mode 120000
index 0000000..bb3b625
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/nlink_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/nlink_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/packet.h mlibc-workdir/sysdeps/nyx/include/abi-bits/packet.h
new file mode 120000
index 0000000..998ef1a
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/packet.h
@@ -0,0 +1 @@
+../../../../abis/linux/packet.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/pid_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/pid_t.h
new file mode 120000
index 0000000..baa90f6
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/pid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/pid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/poll.h mlibc-workdir/sysdeps/nyx/include/abi-bits/poll.h
new file mode 120000
index 0000000..8ea6a0a
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/poll.h
@@ -0,0 +1 @@
+../../../../abis/linux/poll.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/ptrace.h mlibc-workdir/sysdeps/nyx/include/abi-bits/ptrace.h
new file mode 120000
index 0000000..b2517b2
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/ptrace.h
@@ -0,0 +1 @@
+../../../../abis/linux/ptrace.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/reboot.h mlibc-workdir/sysdeps/nyx/include/abi-bits/reboot.h
new file mode 120000
index 0000000..77013a4
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/reboot.h
@@ -0,0 +1 @@
+../../../../abis/linux/reboot.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/resource.h mlibc-workdir/sysdeps/nyx/include/abi-bits/resource.h
new file mode 120000
index 0000000..88d7402
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/resource.h
@@ -0,0 +1 @@
+../../../../abis/linux/resource.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/seek-whence.h mlibc-workdir/sysdeps/nyx/include/abi-bits/seek-whence.h
new file mode 120000
index 0000000..df7bccf
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/seek-whence.h
@@ -0,0 +1 @@
+../../../../abis/linux/seek-whence.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/shm.h mlibc-workdir/sysdeps/nyx/include/abi-bits/shm.h
new file mode 120000
index 0000000..067d8c4
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/shm.h
@@ -0,0 +1 @@
+../../../../abis/linux/shm.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/signal.h mlibc-workdir/sysdeps/nyx/include/abi-bits/signal.h
new file mode 120000
index 0000000..4dcb0b7
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/signal.h
@@ -0,0 +1 @@
+../../../../abis/linux/signal.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/socket.h mlibc-workdir/sysdeps/nyx/include/abi-bits/socket.h
new file mode 120000
index 0000000..f1dc016
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/socket.h
@@ -0,0 +1 @@
+../../../../abis/linux/socket.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/socklen_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/socklen_t.h
new file mode 120000
index 0000000..41f3b11
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/socklen_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/socklen_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/stat.h mlibc-workdir/sysdeps/nyx/include/abi-bits/stat.h
new file mode 120000
index 0000000..1f63b41
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/stat.h
@@ -0,0 +1 @@
+../../../../abis/linux/stat.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/statfs.h mlibc-workdir/sysdeps/nyx/include/abi-bits/statfs.h
new file mode 120000
index 0000000..e3d202f
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/statfs.h
@@ -0,0 +1 @@
+../../../../abis/linux/statfs.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/statvfs.h mlibc-workdir/sysdeps/nyx/include/abi-bits/statvfs.h
new file mode 120000
index 0000000..1fc80c2
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/statvfs.h
@@ -0,0 +1 @@
+../../../../abis/linux/statvfs.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/suseconds_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/suseconds_t.h
new file mode 120000
index 0000000..9ed6597
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/suseconds_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/suseconds_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/termios.h mlibc-workdir/sysdeps/nyx/include/abi-bits/termios.h
new file mode 120000
index 0000000..ee8f0b0
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/termios.h
@@ -0,0 +1 @@
+../../../../abis/linux/termios.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/time.h mlibc-workdir/sysdeps/nyx/include/abi-bits/time.h
new file mode 120000
index 0000000..2a02625
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/time.h
@@ -0,0 +1 @@
+../../../../abis/linux/time.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/uid_t.h mlibc-workdir/sysdeps/nyx/include/abi-bits/uid_t.h
new file mode 120000
index 0000000..b306777
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/uid_t.h
@@ -0,0 +1 @@
+../../../../abis/linux/uid_t.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/utsname.h mlibc-workdir/sysdeps/nyx/include/abi-bits/utsname.h
new file mode 120000
index 0000000..b285754
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/utsname.h
@@ -0,0 +1 @@
+../../../../abis/linux/utsname.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/vm-flags.h mlibc-workdir/sysdeps/nyx/include/abi-bits/vm-flags.h
new file mode 120000
index 0000000..bbe258c
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/vm-flags.h
@@ -0,0 +1 @@
+../../../../abis/linux/vm-flags.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/wait.h mlibc-workdir/sysdeps/nyx/include/abi-bits/wait.h
new file mode 120000
index 0000000..feb2840
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/wait.h
@@ -0,0 +1 @@
+../../../../abis/linux/wait.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/abi-bits/xattr.h mlibc-workdir/sysdeps/nyx/include/abi-bits/xattr.h
new file mode 120000
index 0000000..66412d7
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/abi-bits/xattr.h
@@ -0,0 +1 @@
+../../../../abis/linux/xattr.h
\ No newline at end of file
diff --git mlibc-workdir/sysdeps/nyx/include/nyx/syscall.h mlibc-workdir/sysdeps/nyx/include/nyx/syscall.h
new file mode 100644
index 0000000..a6b0ffc
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/include/nyx/syscall.h
@@ -0,0 +1,82 @@
+#ifndef _NYX__SYSCALL_H
+#define _NYX__SYSCALL_H
+
+#include <stdint.h>
+
+enum syscalls {
+  SYS_DEBUG,
+  SYS_OPEN,
+  SYS_CLOSE,
+  SYS_READ,
+  SYS_WRITE,
+  SYS_STAT,
+  SYS_SEEK,
+  SYS_MMAP,
+  SYS_EXIT,
+  SYS_TCB_SET,
+  SYS_GETPID,
+  SYS_GETPPID,
+  SYS_FORK,
+  SYS_EXEC,
+};
+
+static inline uintptr_t __syscall0(long sc) {
+  uintptr_t ret;
+  asm volatile("int $0x80" : "=a"(ret) : "a"(sc) : "rcx", "r11", "memory");
+  return ret;
+}
+
+static inline uintptr_t __syscall1(long sc, uintptr_t arg1) {
+  uintptr_t ret;
+  asm volatile("int $0x80"
+               : "=a"(ret)
+               : "a"(sc), "D"(arg1)
+               : "rcx", "r11", "memory");
+  return ret;
+}
+
+static inline uintptr_t __syscall2(long sc, uintptr_t arg1, uintptr_t arg2) {
+  uintptr_t ret;
+  asm volatile("int $0x80"
+               : "=a"(ret)
+               : "a"(sc), "D"(arg1), "S"(arg2)
+               : "rcx", "r11", "memory");
+  return ret;
+}
+
+static inline uintptr_t __syscall3(long sc, uintptr_t arg1, uintptr_t arg2,
+                                   uintptr_t arg3) {
+  uintptr_t ret;
+  asm volatile("int $0x80"
+               : "=a"(ret)
+               : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3)
+               : "rcx", "r11", "memory");
+  return ret;
+}
+
+static inline uintptr_t __syscall4(long sc, uintptr_t arg1, uintptr_t arg2,
+                                   uintptr_t arg3, uintptr_t arg4) {
+  uintptr_t ret;
+  register uintptr_t arg4_reg asm("r10") = arg4;
+  asm volatile("int $0x80"
+               : "=a"(ret)
+               : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3), "r"(arg4_reg)
+               : "rcx", "r11", "memory");
+  return ret;
+}
+
+static inline uintptr_t __syscall5(long sc, uintptr_t arg1, uintptr_t arg2,
+                                   uintptr_t arg3, uintptr_t arg4,
+                                   uintptr_t arg5) {
+  uintptr_t ret;
+  register uintptr_t arg4_reg asm("r10") = arg4;
+  register uintptr_t arg5_reg asm("r8") = arg5;
+  asm volatile("int $0x80"
+               : "=a"(ret)
+               : "a"(sc), "D"(arg1), "S"(arg2), "d"(arg3), "r"(arg4_reg),
+                 "r"(arg5_reg)
+               : "rcx", "r11", "memory");
+  return ret;
+}
+
+#endif
diff --git mlibc-workdir/sysdeps/nyx/meson.build mlibc-workdir/sysdeps/nyx/meson.build
new file mode 100644
index 0000000..1492911
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/meson.build
@@ -0,0 +1,92 @@
+
+rtdl_sources += files(
+	'generic/generic.cpp'
+)
+
+libc_sources += files(
+	'generic/entry.cpp',
+	'generic/generic.cpp',
+)
+
+if not no_headers
+	install_headers(
+		'include/abi-bits/auxv.h',
+		'include/abi-bits/seek-whence.h',
+		'include/abi-bits/vm-flags.h',
+		'include/abi-bits/errno.h',
+		'include/abi-bits/fcntl.h',
+		'include/abi-bits/in.h',
+		'include/abi-bits/reboot.h',
+		'include/abi-bits/resource.h',
+		'include/abi-bits/stat.h',
+		'include/abi-bits/signal.h',
+		'include/abi-bits/socket.h',
+		'include/abi-bits/termios.h',
+		'include/abi-bits/time.h',
+		'include/abi-bits/blkcnt_t.h',
+		'include/abi-bits/blksize_t.h',
+		'include/abi-bits/dev_t.h',
+		'include/abi-bits/gid_t.h',
+		'include/abi-bits/ino_t.h',
+		'include/abi-bits/mode_t.h',
+		'include/abi-bits/nlink_t.h',
+		'include/abi-bits/pid_t.h',
+		'include/abi-bits/uid_t.h',
+		'include/abi-bits/access.h',
+		'include/abi-bits/wait.h',
+		'include/abi-bits/limits.h',
+		'include/abi-bits/utsname.h',
+		'include/abi-bits/ptrace.h',
+		'include/abi-bits/poll.h',
+		'include/abi-bits/epoll.h',
+		'include/abi-bits/packet.h',
+		'include/abi-bits/inotify.h',
+		'include/abi-bits/clockid_t.h',
+		'include/abi-bits/shm.h',
+		'include/abi-bits/mqueue.h',
+		'include/abi-bits/suseconds_t.h',
+		'include/abi-bits/fsfilcnt_t.h',
+		'include/abi-bits/fsblkcnt_t.h',
+		'include/abi-bits/socklen_t.h',
+		'include/abi-bits/statfs.h',
+		'include/abi-bits/statvfs.h',
+		'include/abi-bits/ioctls.h',
+		'include/abi-bits/xattr.h',
+		subdir: 'abi-bits'
+	)
+
+	install_headers(
+		'include/nyx/syscall.h',
+		subdir: 'nyx',
+	)
+endif
+
+if not headers_only
+	crt = custom_target('crt0',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: host_machine.cpu_family() / 'crt-src/crt0.S',
+		output: 'crt0.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+
+	custom_target('crti',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: host_machine.cpu_family() / 'crt-src/crti.S',
+		output: 'crti.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+
+	custom_target('crtn',
+		build_by_default: true,
+		command: c_compiler.cmd_array() + ['-c', '-o', '@OUTPUT@', '@INPUT@'],
+		input: host_machine.cpu_family() / 'crt-src/crtn.S',
+		output: 'crtn.o',
+		install: true,
+		install_dir: get_option('libdir')
+	)
+endif
+
diff --git mlibc-workdir/sysdeps/nyx/x86_64/crt-src/crt0.S mlibc-workdir/sysdeps/nyx/x86_64/crt-src/crt0.S
new file mode 100644
index 0000000..d16a46f
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/x86_64/crt-src/crt0.S
@@ -0,0 +1,7 @@
+.section .text
+.global _start
+_start:
+    mov $main, %rdi
+    call __mlibc_entry
+.section .note.GNU-stack,"",%progbits
+
diff --git mlibc-workdir/sysdeps/nyx/x86_64/crt-src/crti.S mlibc-workdir/sysdeps/nyx/x86_64/crt-src/crti.S
new file mode 100644
index 0000000..911b078
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/x86_64/crt-src/crti.S
@@ -0,0 +1,11 @@
+.section .init
+.global _init
+_init:
+	push %rax
+
+.section .fini
+.global _fini
+_fini:
+	push %rax
+.section .note.GNU-stack,"",%progbits
+
diff --git mlibc-workdir/sysdeps/nyx/x86_64/crt-src/crtn.S mlibc-workdir/sysdeps/nyx/x86_64/crt-src/crtn.S
new file mode 100644
index 0000000..0187e50
--- /dev/null
+++ mlibc-workdir/sysdeps/nyx/x86_64/crt-src/crtn.S
@@ -0,0 +1,9 @@
+.section .init
+	pop %rax
+	ret
+
+.section .fini
+	pop %rax
+	ret
+.section .note.GNU-stack,"",%progbits
+
